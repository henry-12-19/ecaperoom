{"version":3,"sources":["../src/optionParser.js"],"names":["R","fse","PACKAGES_DIR","HARDWARE_DIR","BOARDS_FNAME","getLines","compose","reject","test","map","trim","split","menuRegExp","optionNameRegExp","boardOptionRegExp","disableRtsOptionRegExp","osRegExp","getBoardsTxtPath","curry","dataPath","fqbn","version","packageName","archName","resolve","parseOptionNames","fromPairs","pipe","match","tail","filter","parseIntermediateOptions","reduce","acc","line","boardOption","length","boardId","optionId","optionVal","optionName","option","name","value","over","lensPath","append","either","convertIntermediateOptions","optionNames","intOptions","values","mapObjIndexed","val","key","parseOptions","lines","options","parseDisableRts","isEmpty","patchBoardsWithOptions","cores","boards","boardTxtContentsByCoreId","txtPath","readFile","core","ID","Installed","indexBy","prop","optionsByCoreAndBoard","boardsTxtContents","disableRts","board","has","FQBN","fqbnParts","coreId","join","init","last","pathOr","merge","omit"],"mappings":"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","file":"optionParser.js","sourcesContent":["/**\n * One bright day this module will be burned.\n * See: https://github.com/arduino/arduino-cli/issues/45\n */\n\nimport path from 'path';\nimport * as R from 'ramda';\nimport * as fse from 'fs-extra';\nimport promiseAllProperties from 'promise-all-properties';\n\nconst PACKAGES_DIR = 'packages';\nconst HARDWARE_DIR = 'hardware';\nconst BOARDS_FNAME = 'boards.txt';\n\n/**\n * Types\n *\n * OptionValue :: {\n *   name: String,         // Human-readable name. E.G. \"80 MHz\"\n *   value: String,        // Option value. E.G. \"80\"\n * }\n *\n * OptionName :: String    // Human-readable option name. E.G. \"CPU Frequency\"\n * OptionId :: String      // Option id as is in the `boards.txt`, E.G. \"CpuFrequency\"\n *\n * Option :: {\n *   optionName: OptionName,\n *   optionId: OptionId,\n *   values: [OptionValue],\n * }\n */\n\n// =============================================================================\n//\n// Utils\n//\n// =============================================================================\n\n// :: String -> [String]\nexport const getLines = R.compose(\n  R.reject(R.test(/^(#|$)/)),\n  R.map(R.trim),\n  R.split(/$/gm)\n);\n\nconst menuRegExp = /^menu\\./;\n\nconst optionNameRegExp = /^menu\\.([a-zA-Z0-9_]+)=(.+)$/;\n\nconst boardOptionRegExp = /^([a-zA-Z0-9_]+)\\.menu\\.([a-zA-Z0-9_]+)\\.([a-zA-Z0-9_]+)=(.+)$/;\n\nconst disableRtsOptionRegExp = /^([a-zA-Z0-9_]+)\\.serial\\.disableRTS=(.+)$/;\n\nconst osRegExp = /(linux|macosx|windows)/;\n\n// =============================================================================\n//\n// Parsers\n//\n// =============================================================================\n\n// :: Path -> FQBN -> String -> Path\nexport const getBoardsTxtPath = R.curry((dataPath, fqbn, version) => {\n  const [packageName, archName] = R.split(':', fqbn);\n  return path.resolve(\n    dataPath,\n    PACKAGES_DIR,\n    packageName,\n    HARDWARE_DIR,\n    archName,\n    version,\n    BOARDS_FNAME\n  );\n});\n\n/**\n * Parses human-readable option names from `boards.txt` contents.\n *\n * E.G.\n * `menu.CpuFrequency=CPU Frequency`\n * will become\n * `{ CpuFrequency: 'CPU Frequency' }`\n *\n * :: [String] -> Map OptionId OptionName\n */\nexport const parseOptionNames = R.compose(\n  R.fromPairs,\n  R.map(R.pipe(R.match(optionNameRegExp), R.tail)),\n  R.filter(R.test(menuRegExp))\n);\n\n/**\n * Parses options for boards indexed by board ID (\"uno\", \"wifi_slot\" and etc)\n *\n * :: [String] -> Map BoardId (Map OptionId [OptionValue])\n */\nexport const parseIntermediateOptions = R.compose(\n  R.reduce((acc, line) => {\n    const boardOption = R.match(boardOptionRegExp, line);\n    if (boardOption.length < 5) return acc;\n    const [, boardId, optionId, optionVal, optionName] = boardOption;\n    const option = { name: optionName, value: optionVal };\n    return R.over(R.lensPath([boardId, optionId]), R.append(option), acc);\n  }, {}),\n  R.reject(R.either(R.test(menuRegExp), R.test(osRegExp)))\n);\n\n// :: Map OptionId OptionName -> Map OptionId [OptionValue] -> [Option]\nexport const convertIntermediateOptions = R.curry((optionNames, intOptions) =>\n  R.compose(\n    R.values,\n    R.mapObjIndexed((val, key) => ({\n      optionName: optionNames[key],\n      optionId: key,\n      values: val,\n    }))\n  )(intOptions)\n);\n\n// :: String -> Map BoardId [Option]\n/**\n * Parses boards.txt options into Object, that could be merged with Board objects\n * by board id (last part of FQBN).\n *\n * :: String -> Map BoardId [Option]\n */\nexport const parseOptions = R.compose(lines => {\n  const optionNames = parseOptionNames(lines);\n  const options = parseIntermediateOptions(lines);\n  return R.map(convertIntermediateOptions(optionNames), options);\n}, getLines);\n\nconst parseDisableRts = R.compose(\n  R.fromPairs,\n  R.map(([, boardId, value]) => [boardId, value === 'true']),\n  R.reject(R.isEmpty),\n  R.map(R.match(disableRtsOptionRegExp)),\n  getLines\n);\n\n// =============================================================================\n//\n// API\n//\n// =============================================================================\n\n/**\n * Loads `boards.txt` of installed cores and patches Board objects with options.\n * Normalises 'FQBN' to 'fqbn' for compatability across xod packages.\n *\n * :: Path -> [Core] -> [InstalledBoard | AvailableBoard] -> [InstalledBoard | AvailableBoard]\n */\nexport const patchBoardsWithOptions = R.curry(\n  async (dataPath, cores, boards) => {\n    if (!boards) return [];\n\n    // Map CoreID Object\n    const boardTxtContentsByCoreId = await R.compose(\n      promiseAllProperties,\n      R.map(txtPath => fse.readFile(txtPath, 'utf8')),\n      R.map(core => getBoardsTxtPath(dataPath, core.ID, core.Installed)),\n      R.indexBy(R.prop('ID'))\n    )(cores);\n\n    const optionsByCoreAndBoard = R.map(\n      boardsTxtContents => ({\n        disableRts: parseDisableRts(boardsTxtContents),\n        options: parseOptions(boardsTxtContents),\n      }),\n      boardTxtContentsByCoreId\n    );\n\n    return R.map(board => {\n      if (!R.has('FQBN', board)) return board;\n\n      const fqbn = board.FQBN;\n      const fqbnParts = fqbn.split(':');\n      const coreId = R.compose(R.join(':'), R.init)(fqbnParts);\n      const boardId = R.last(fqbnParts);\n\n      const options = R.pathOr(\n        [],\n        [coreId, 'options', boardId],\n        optionsByCoreAndBoard\n      );\n\n      const disableRts = R.pathOr(\n        false,\n        [coreId, 'disableRts', boardId],\n        optionsByCoreAndBoard\n      );\n\n      return R.merge(\n        {\n          options,\n          disableRts,\n          fqbn,\n        },\n        R.omit(['FQBN'], board)\n      );\n    }, boards);\n  }\n);\n"]}