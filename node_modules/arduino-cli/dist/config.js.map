{"version":3,"sources":["../src/config.js"],"names":["R","fse","ADDITIONAL_URLS_PATH","getDefaultConfig","configDir","directories","user","data","stringifyConfig","cfg","stringify","saveConfig","configPath","config","yamlString","writeFileSync","ensureDirSync","path","configure","inputConfig","mkdtempSync","saved","dir","setPackageIndexUrls","urls","readFile","encoding","then","parse","assocPath","writeFile","always"],"mappings":";;;;;;;AAAA;;IAAYA,C;;AACZ;;AACA;;AACA;;IAAYC,G;;AACZ;;;;;;;;AAEO,MAAMC,sDAAuB,CAAC,eAAD,EAAkB,iBAAlB,CAA7B;;AAEP,MAAMC,mBAAmBC,cAAc;AACrCC,eAAa;AACXC,UAAM,mBAAQF,SAAR,EAAmB,YAAnB,CADK;AAEXG,UAAM,mBAAQH,SAAR,EAAmB,MAAnB;AAFK;AADwB,CAAd,CAAzB;;AAOA,MAAMI,kBAAkBC,OAAO,iBAAKC,SAAL,CAAeD,GAAf,EAAoB,EAApB,EAAwB,CAAxB,CAA/B;;AAEA;AACO,MAAME,kCAAa,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAChD,QAAMC,aAAa,iBAAKJ,SAAL,CAAeG,MAAf,EAAuB,CAAvB,CAAnB;;AAEA;AACAZ,MAAIc,aAAJ,CAAkBH,UAAlB,EAA8BE,UAA9B;;AAEA;AACAb,MAAIe,aAAJ,CAAkBH,OAAOR,WAAP,CAAmBC,IAArC;AACAL,MAAIe,aAAJ,CAAkBH,OAAOR,WAAP,CAAmBE,IAArC;;AAEA,SAAO;AACLM,UADK;AAELI,UAAML;AAFD,GAAP;AAID,CAdM;;AAgBP;AACO,MAAMM,gCAAYC,eAAe;AACtC,QAAMf,YAAYH,IAAImB,WAAJ,CAAgB,mBAAQ,iBAAR,EAAkB,aAAlB,CAAhB,CAAlB;AACA,QAAMR,aAAa,mBAAQR,SAAR,EAAmB,kBAAnB,CAAnB;AACA,QAAMS,SAASM,eAAehB,iBAAiBC,SAAjB,CAA9B;AACA,QAAMiB,QAAQV,WAAWC,UAAX,EAAuBC,MAAvB,CAAd;AACA,SAAO,EAAEA,QAAQQ,MAAMR,MAAhB,EAAwBI,MAAMI,MAAMJ,IAApC,EAA0CK,KAAKlB,SAA/C,EAAP;AACD,CANM;;AAQP;AACO,MAAMmB,oDAAsB,CAACX,UAAD,EAAaY,IAAb,KACjCvB,IACGwB,QADH,CACYb,UADZ,EACwB,EAAEc,UAAU,MAAZ,EADxB,EAEGC,IAFH,CAEQ,iBAAKC,KAFb,EAGGD,IAHH,CAGQ3B,EAAE6B,SAAF,CAAY3B,oBAAZ,EAAkCsB,IAAlC,CAHR,EAIGG,IAJH,CAIQnB,eAJR,EAKGmB,IALH,CAKQpB,QAAQN,IAAI6B,SAAJ,CAAclB,UAAd,EAA0BL,IAA1B,CALhB,EAMGoB,IANH,CAMQ3B,EAAE+B,MAAF,CAASP,IAAT,CANR,CADK","file":"config.js","sourcesContent":["import * as R from 'ramda';\nimport { tmpdir } from 'os';\nimport { resolve } from 'path';\nimport * as fse from 'fs-extra';\nimport YAML from 'yamljs';\n\nexport const ADDITIONAL_URLS_PATH = ['board_manager', 'additional_urls'];\n\nconst getDefaultConfig = configDir => ({\n  directories: {\n    user: resolve(configDir, 'sketchbook'),\n    data: resolve(configDir, 'data'),\n  },\n});\n\nconst stringifyConfig = cfg => YAML.stringify(cfg, 10, 2);\n\n// :: Path -> Object -> { config: Object, path: Path }\nexport const saveConfig = (configPath, config) => {\n  const yamlString = YAML.stringify(config, 2);\n\n  // Write config\n  fse.writeFileSync(configPath, yamlString);\n\n  // Ensure that sketchbook and data directories are exist\n  fse.ensureDirSync(config.directories.user);\n  fse.ensureDirSync(config.directories.data);\n\n  return {\n    config,\n    path: configPath,\n  };\n};\n\n// :: Object -> { config: Object, path: Path }\nexport const configure = inputConfig => {\n  const configDir = fse.mkdtempSync(resolve(tmpdir(), 'arduino-cli'));\n  const configPath = resolve(configDir, 'arduino-cli.yaml');\n  const config = inputConfig || getDefaultConfig(configDir);\n  const saved = saveConfig(configPath, config);\n  return { config: saved.config, path: saved.path, dir: configDir };\n};\n\n// :: Path -> [URL] -> Promise [URL] Error\nexport const setPackageIndexUrls = (configPath, urls) =>\n  fse\n    .readFile(configPath, { encoding: 'utf8' })\n    .then(YAML.parse)\n    .then(R.assocPath(ADDITIONAL_URLS_PATH, urls))\n    .then(stringifyConfig)\n    .then(data => fse.writeFile(configPath, data))\n    .then(R.always(urls));\n"]}