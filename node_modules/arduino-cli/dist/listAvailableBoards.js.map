{"version":3,"sources":["../src/listAvailableBoards.js"],"names":["R","fse","ORIGINAL_PACKAGE_INDEX_FILE","getPackageIndexFiles","getConfig","packagesDir","config","urls","pathOr","filepaths","compose","map","fname","join","append","last","split","prop","readPackages","composeP","unnest","pluck","x","Promise","all","readJson","sortByVersion","sort","useWith","getAvailableBoards","pkg","values","arch","assoc","name","architecture","version","pipe","groupBy"],"mappings":";;;;;;AAeA;;;;AACA;;AACA;;IAAYA,C;;AACZ;;IAAYC,G;;AACZ;;;;AAEA;;;;;;AArBA;;;;;;;;;;;;;;;AAuBA,MAAMC,8BAA8B,oBAApC;;AAEA;;AAEA;;;;;;;;AAQA,MAAMC,uBAAuB,OAAOC,SAAP,EAAkBC,WAAlB,KAAkC;AAC7D,QAAMC,SAAS,MAAMF,WAArB;AACA,QAAMG,OAAOP,EAAEQ,MAAF,CAAS,EAAT,gCAAmCF,MAAnC,CAAb;AACA,QAAMG,YAAYT,EAAEU,OAAF,CAChBV,EAAEW,GAAF,CAAMC,SAAS,eAAKC,IAAL,CAAUR,WAAV,EAAuBO,KAAvB,CAAf,CADgB,EAEhBZ,EAAEc,MAAF,CAASZ,2BAAT,CAFgB,EAGhBF,EAAEW,GAAF,CAAMX,EAAEU,OAAF,CAAUV,EAAEe,IAAZ,EAAkBf,EAAEgB,KAAF,CAAQ,GAAR,CAAlB,EAAgChB,EAAEiB,IAAF,CAAO,UAAP,CAAhC,aAAN,CAHgB,EAIhBV,IAJgB,CAAlB;AAKA,SAAOE,SAAP;AACD,CATD;;AAWA;;;;;;AAMA,MAAMS,eAAelB,EAAEmB,QAAF,CAAWnB,EAAEoB,MAAb,EAAqBpB,EAAEqB,KAAF,CAAQ,UAAR,CAArB,EAA0CC,KAC7DC,QAAQC,GAAR,CAAYxB,EAAEW,GAAF,CAAMV,IAAIwB,QAAV,EAAoBH,CAApB,CAAZ,CADmB,CAArB;;AAIA,MAAMI,gBAAgB1B,EAAE2B,IAAF,CACpB3B,EAAE4B,OAAF,+BAA0B,CAAC5B,EAAEiB,IAAF,CAAO,SAAP,CAAD,EAAoBjB,EAAEiB,IAAF,CAAO,SAAP,CAApB,CAA1B,CADoB,CAAtB;;AAIA;AACA,MAAMY,qBAAqB7B,EAAEU,OAAF,CACzBV,EAAEoB,MADuB,EAEzBpB,EAAEW,GAAF,CAAMmB,OACJ9B,EAAEU,OAAF,CACEV,EAAEoB,MADJ,EAEEpB,EAAE+B,MAFJ,EAGE/B,EAAEW,GAAF,CAAMqB,QACJhC,EAAEU,OAAF,CACEV,EAAEW,GAAF,CACEX,EAAEU,OAAF,CACEV,EAAEiC,KAAF,CAAQ,aAAR,EAAuBD,KAAKE,IAA5B,CADF,EAEElC,EAAEiC,KAAF,CAAQ,SAAR,EAAoB,GAAEH,IAAII,IAAK,IAAGF,KAAKG,YAAa,EAApD,CAFF,EAGEnC,EAAEiC,KAAF,CAAQ,SAAR,EAAmBD,KAAKI,OAAxB,CAHF,CADF,CADF,EAQEpC,EAAEiB,IAAF,CAAO,QAAP,CARF,EASEe,IATF,CADF,CAHF,EAeEhC,EAAEW,GAAF,CAAMX,EAAEqC,IAAF,CAAOX,aAAP,EAAsB1B,EAAEe,IAAxB,CAAN,CAfF,EAgBEf,EAAEsC,OAAF,CAAUtC,EAAEiB,IAAF,CAAO,cAAP,CAAV,CAhBF,EAiBEjB,EAAEiB,IAAF,CAAO,WAAP,CAjBF,EAkBEa,GAlBF,CADF,CAFyB,CAA3B;;AAyBA;;;;;;kBAMe9B,EAAEmB,QAAF,CACbU,kBADa,EAEbX,YAFa,EAGbf,oBAHa,C","file":"listAvailableBoards.js","sourcesContent":["/**\n * Module provides one function, that searches and reads all package_*_index.json\n * files and get all board names from them.\n * We need this function, because `arduino-cli board listall` shows only\n * boards of already installed packages.\n *\n * Function accepts a path to the directory with `package_*_index.json` files\n * and returns a Promise with a list of objects like this:\n * {\n *   name: 'Arduino Nano',\n *   package: 'arduino:avr',\n *   version: '1.6.12'\n * }\n */\n\nimport path from 'path';\nimport { parse } from 'url';\nimport * as R from 'ramda';\nimport * as fse from 'fs-extra';\nimport versionCompare from 'tiny-version-compare';\n\nimport { ADDITIONAL_URLS_PATH } from './config';\n\nconst ORIGINAL_PACKAGE_INDEX_FILE = 'package_index.json';\n\n// AvailableBoard :: { name :: String, package :: String }\n\n/**\n * Returns a list of paths to the additional package index files.\n *\n * Gets filenames of additional package index files from arduino cli config\n * by parsing URLs and joins filenames with path to packages directory.\n *\n * :: (() -> Promise Object Error) -> Path -> Promise [Path] Error\n */\nconst getPackageIndexFiles = async (getConfig, packagesDir) => {\n  const config = await getConfig();\n  const urls = R.pathOr([], ADDITIONAL_URLS_PATH, config);\n  const filepaths = R.compose(\n    R.map(fname => path.join(packagesDir, fname)),\n    R.append(ORIGINAL_PACKAGE_INDEX_FILE),\n    R.map(R.compose(R.last, R.split('/'), R.prop('pathname'), parse))\n  )(urls);\n  return filepaths;\n};\n\n/**\n * Reads package index json files, take all package object from them and\n * returns one list of packages.\n *\n * :: [Path] -> Promise [Object] Error\n */\nconst readPackages = R.composeP(R.unnest, R.pluck('packages'), x =>\n  Promise.all(R.map(fse.readJson, x))\n);\n\nconst sortByVersion = R.sort(\n  R.useWith(versionCompare, [R.prop('version'), R.prop('version')])\n);\n\n// :: [Object] -> [AvailableBoard]\nconst getAvailableBoards = R.compose(\n  R.unnest,\n  R.map(pkg =>\n    R.compose(\n      R.unnest,\n      R.values,\n      R.map(arch =>\n        R.compose(\n          R.map(\n            R.compose(\n              R.assoc('packageName', arch.name),\n              R.assoc('package', `${pkg.name}:${arch.architecture}`),\n              R.assoc('version', arch.version)\n            )\n          ),\n          R.prop('boards')\n        )(arch)\n      ),\n      R.map(R.pipe(sortByVersion, R.last)),\n      R.groupBy(R.prop('architecture')),\n      R.prop('platforms')\n    )(pkg)\n  )\n);\n\n/**\n * Reads all package index json files in the specified directory\n * and returns a promise with a list of Available Boards.\n *\n * :: (() -> Promise Object Error) -> Path -> Promise [AvailableBoard] Error\n */\nexport default R.composeP(\n  getAvailableBoards,\n  readPackages,\n  getPackageIndexFiles\n);\n"]}